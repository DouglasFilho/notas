// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using notas.Server.Backend.Infrastructure.Data;

#nullable disable

namespace notas.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("notas.Server.Backend.Domain.Entities.Empresa", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<int>("IsAtiva")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdEmpresa");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("notas.Server.Backend.Domain.Entities.NotaFiscal", b =>
                {
                    b.Property<int>("IdNota")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChaveAcesso")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataEmissao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataPostagem")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EmpresaDestinoIdEmpresa")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmpresaOrigemIdEmpresa")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NumeroNota")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Serie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoNota")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("TEXT");

                    b.HasKey("IdNota");

                    b.HasIndex("EmpresaDestinoIdEmpresa");

                    b.HasIndex("EmpresaOrigemIdEmpresa");

                    b.ToTable("NotasFiscais");
                });

            modelBuilder.Entity("notas.Server.Backend.Domain.Entities.Empresa", b =>
                {
                    b.OwnsOne("notas.Server.Backend.Domain.ValueObjects.Endereco", "EnderecoEmpresa", b1 =>
                        {
                            b1.Property<int>("EmpresaIdEmpresa")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("bairro")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("cep")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("cidade")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("complemento")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("logradouro")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("numero")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("uf")
                                .HasColumnType("INTEGER");

                            b1.HasKey("EmpresaIdEmpresa");

                            b1.ToTable("Empresas");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaIdEmpresa");
                        });

                    b.Navigation("EnderecoEmpresa")
                        .IsRequired();
                });

            modelBuilder.Entity("notas.Server.Backend.Domain.Entities.NotaFiscal", b =>
                {
                    b.HasOne("notas.Server.Backend.Domain.Entities.Empresa", "EmpresaDestino")
                        .WithMany()
                        .HasForeignKey("EmpresaDestinoIdEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("notas.Server.Backend.Domain.Entities.Empresa", "EmpresaOrigem")
                        .WithMany()
                        .HasForeignKey("EmpresaOrigemIdEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmpresaDestino");

                    b.Navigation("EmpresaOrigem");
                });
#pragma warning restore 612, 618
        }
    }
}
